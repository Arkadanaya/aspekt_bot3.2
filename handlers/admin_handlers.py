from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
from utils.decorators import for_staff_only
from utils.helpers import close_chat
from config.keyboards import get_operator_main_keyboard, get_chat_keyboard
from models.state import active_requests, active_chats


@for_staff_only
async def staff_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        reply_markup=get_operator_main_keyboard()
    )


@for_staff_only
async def staff_show_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not active_requests:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                        reply_markup=get_operator_main_keyboard())
        return

    buttons = []
    for user_id, request in active_requests.items():
        user = request['user']
        time_ago = (datetime.now() - request['timestamp']).seconds // 60
        buttons.append([
            InlineKeyboardButton(
                text=f"üë§ {user.first_name} ({time_ago} –º–∏–Ω –Ω–∞–∑–∞–¥)",
                callback_data=f"connect_{user_id}"
            )
        ])

    await update.message.reply_text(
        "üõé –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


@for_staff_only
async def staff_connect_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = int(query.data.split('_')[1])
    operator = update.effective_user

    if user_id not in active_requests:
        await query.message.reply_text("‚ùå –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return

    user = active_requests[user_id]['user']
    del active_requests[user_id]

    active_chats[operator.id] = user_id
    active_chats[user_id] = operator.id

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä {operator.first_name} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É!\n\n–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
            reply_markup=get_chat_keyboard()
        )

        try:
            await query.message.delete()
        except Exception:
            pass

        await context.bot.send_message(
            chat_id=operator.id,
            text=f"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–ª–∏–µ–Ω—Ç—É {user.first_name} (ID: {user_id})\n\n"
                 "–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—É.",
            reply_markup=get_operator_main_keyboard()
        )
    except Exception:
        await query.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –Ω–æ —á–∞—Ç —Å–æ–∑–¥–∞–Ω",
            reply_markup=get_operator_main_keyboard()
        )


@for_staff_only
async def staff_end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    operator_id = update.effective_user.id
    user_id = active_chats.get(operator_id)

    if not user_id:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.", reply_markup=get_operator_main_keyboard())
        return

    await close_chat(context, user_id)