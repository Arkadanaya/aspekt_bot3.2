import logging
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from config.settings import ADMIN_IDS
from config.keyboards import get_client_main_keyboard, get_operator_main_keyboard
from handlers.admin_handlers import staff_show_requests, staff_end_chat, staff_start
from handlers.client_handlers import client_end_chat, client_start
from models.state import active_chats

logger = logging.getLogger(__name__)


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {message_text}")

    if message_text == "üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        if user.id in ADMIN_IDS:
            await staff_end_chat(update, context)
        else:
            await client_end_chat(update, context)
        return

    if message_text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã" and user.id in ADMIN_IDS:
        await staff_show_requests(update, context)
        return

    if user.id not in ADMIN_IDS:
        operator_id = active_chats.get(user.id)
        if not operator_id:
            await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

        try:
            await context.bot.send_message(
                chat_id=operator_id,
                text=f"üë§ <b>–ö–ª–∏–µ–Ω—Ç {user.first_name}:</b>\n{message_text}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    else:
        user_id = active_chats.get(user.id)
        if not user_id:
            return

        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üë®üíº <b>–û–ø–µ—Ä–∞—Ç–æ—Ä {user.first_name}:</b>\n{message_text}",
                parse_mode="HTML"
            )
            await update.message.reply_text("‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É",
                                            reply_to_message_id=update.message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É {user_id}: {str(e)}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.",
                                            reply_markup=get_operator_main_keyboard())


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if update.effective_user.id in ADMIN_IDS:
        await staff_start(update, context)
    else:
        await client_start(update, context)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}", exc_info=context.error)